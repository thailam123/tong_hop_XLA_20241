import numpy as np
from scipy.ndimage import convolve
from tkinter import filedialog
import cv2
import cv2 as cv
from matplotlib import pyplot as plt
from tkinter import Tk, Button
import matplotlib.pyplot as plt
from scipy.ndimage import minimum_filter


def main():

    Histogram_gray("C:/Users/thaiv/.spyder-py3/xu_ly_anh/Image_for_TeamSV/bagues-noise.jpg")
    



# thay ƒë·ªïi ƒë·ªô t∆∞∆°ng ph·∫£n ·∫£nh, h√¨nh 3
def Linear_Contrast_Stretching_Transformation(filepath, r1=70, s1=50, r2=140, s2=200):
    def contrast_stretch(image, r1, s1, r2, s2):
        # Create a lookup table for intensity mapping
        #If lut[50] = 100, all pixels with intensity 50 in image will be replaced with 100 in stretched_image.
        lut = np.zeros(256, dtype=np.uint8)
        for i in range(256):
            #3 d√≤ng ƒëi·ªÅu ki·ªán n√†y l√† theo c√¥ng th·ª©c m√† c√≥
            if i < r1:
                lut[i] = int((s1 / r1) * i)
            elif r1 <= i <= r2:
                lut[i] = int(((s2 - s1) / (r2 - r1)) * (i - r1) + s1)
            else:
                lut[i] = int(((255 - s2) / (255 - r2)) * (i - r2) + s2)
        # Apply the lookup table to the image
        stretched_image = cv2.LUT(image, lut)
        return stretched_image
    # Load a grayscale image
    image = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)
    # Apply the linear contrast stretching
    stretched = contrast_stretch(image, r1, s1, r2, s2)

    # Display the original and transformed images
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.title("Original Image")
    plt.imshow(image, cmap='gray')
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.title("Contrast-Stretched Image")
    plt.imshow(stretched, cmap='gray')
    plt.axis('off')

    plt.tight_layout()
    plt.show()


def Histogram_gray(filepath):
    # ƒê·ªçc ·∫£nh ƒëa m·ª©c x√°m
    image = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)

    # T√≠nh histogram
    hist, bins = np.histogram(image.flatten(), 256, [0, 256])

    # C√¢n b·∫±ng histogram
    equalized_image = cv2.equalizeHist(image)

    # T√≠nh histogram sau c√¢n b·∫±ng
    equalized_hist, _ = np.histogram(equalized_image.flatten(), 256, [0, 256])

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig, axes = plt.subplots(2, 2, figsize=(12, 8))

    # ·∫¢nh g·ªëc
    axes[0, 0].imshow(image, cmap='gray')
    axes[0, 0].set_title('·∫¢nh g·ªëc')
    axes[0, 0].axis('off')

    # Bi·ªÉu ƒë·ªì histogram ·∫£nh g·ªëc
    axes[0, 1].bar(range(256), hist, color='gray')
    axes[0, 1].set_title('Histogram ·∫¢nh g·ªëc')

    # ·∫¢nh sau khi c√¢n b·∫±ng
    axes[1, 0].imshow(equalized_image, cmap='gray')
    axes[1, 0].set_title('·∫¢nh sau c√¢n b·∫±ng')
    axes[1, 0].axis('off')

    # Bi·ªÉu ƒë·ªì histogram ·∫£nh sau c√¢n b·∫±ng
    axes[1, 1].bar(range(256), equalized_hist, color='gray')
    axes[1, 1].set_title('Histogram ·∫¢nh sau c√¢n b·∫±ng')

    plt.tight_layout()
    plt.show()


def max_color_3x3(filepath):
    # ƒê·ªçc ·∫£nh m√†u
    image = cv2.imread(filepath)

    # T·∫°o kernel 3x3
    kernel = np.ones((3, 3), np.uint8)

    # √Åp d·ª•ng b·ªô l·ªçc max (dilate)
    max_filtered_image = cv2.dilate(image, kernel)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    cv2.imshow("Original Image", image)
    cv2.imshow("Max Filtered Image", max_filtered_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def max_gray_3x3(filepath):
    # ƒê·ªçc ·∫£nh m·ª©c x√°m
    image = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)

    # T·∫°o m·∫∑t n·∫° 3x3 cho b·ªô l·ªçc max
    kernel = np.ones((3, 3), np.uint8)

    # √Åp d·ª•ng b·ªô l·ªçc max (s·ª≠ d·ª•ng h√†m dilate c·ªßa OpenCV)
    max_filtered_image = cv2.dilate(image, kernel)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    cv2.imshow('Original Image', image)
    cv2.imshow('Max Filtered Image', max_filtered_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def min_color_3x3(filepath):
    # ƒê·ªçc ·∫£nh m√†u
    image = cv2.imread(filepath)

    # Chuy·ªÉn ƒë·ªïi ·∫£nh sang kh√¥ng gian m√†u HSV ƒë·ªÉ t√°ch bi·ªát m√†u v√† ƒë·ªô s√°ng
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # T·∫°o m·ªôt kernel 3x3 cho l·ªçc min
    kernel = np.ones((3, 3), np.uint8)

    # √Åp d·ª•ng l·ªçc min cho t·ª´ng k√™nh HSV
    min_hue = cv2.erode(hsv[:, :, 0], kernel)
    min_saturation = cv2.erode(hsv[:, :, 1], kernel)
    min_value = cv2.erode(hsv[:, :, 2], kernel)

    # H·ª£p nh·∫•t c√°c k√™nh ƒë√£ l·ªçc ƒë·ªÉ t·∫°o l·∫°i ·∫£nh HSV
    min_hsv = cv2.merge([min_hue, min_saturation, min_value])

    # Chuy·ªÉn ·∫£nh HSV ƒë√£ l·ªçc ng∆∞·ª£c l·∫°i sang kh√¥ng gian m√†u BGR
    min_filtered_image = cv2.cvtColor(min_hsv, cv2.COLOR_HSV2BGR)

    # Hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh ƒë√£ qua l·ªçc min
    cv2.imshow('Original Image', image)
    cv2.imshow('Min Filtered Image', min_filtered_image)

    # ƒê·ª£i ph√≠m b·∫•m v√† ƒë√≥ng c·ª≠a s·ªï
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def min_gray_3x3(filepath):
    # ƒê·ªçc ·∫£nh ƒë·∫ßu v√†o d∆∞·ªõi d·∫°ng ·∫£nh ƒëa m·ª©c x√°m
    img = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)

    # T·∫°o kernel (m·∫∑t n·∫°) 3x3 v·ªõi t·∫•t c·∫£ c√°c gi√° tr·ªã l√† 1
    kernel = np.ones((3, 3), np.uint8)

    # √Åp d·ª•ng ph√©p l·ªçc min
    min_filtered_img = cv2.erode(img, kernel)

    # L∆∞u ho·∫∑c hi·ªÉn th·ªã ·∫£nh k·∫øt qu·∫£
    cv2.imwrite('min_filtered_image.png', min_filtered_img)
    cv2.imshow('Min Filtered Image', min_filtered_img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def median_color_3x3(filepath):
    # ƒê·ªçc ·∫£nh m√†u
    image = cv2.imread(filepath)

    # √Åp d·ª•ng b·ªô l·ªçc trung v·ªã v·ªõi m·∫∑t n·∫° 3x3
    filtered_image = cv2.medianBlur(image, 3)

    # Hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh sau khi √°p d·ª•ng b·ªô l·ªçc
    cv2.imshow('Original Image', image)
    cv2.imshow('Filtered Image', filtered_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def median_gray_3x3(filepath):
    # ƒê·ªçc ·∫£nh ƒëa m·ª©c x√°m
    image = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)

    # √Åp d·ª•ng b·ªô l·ªçc trung v·ªã v·ªõi m·∫∑t n·∫° 3x3
    median_filtered = cv2.medianBlur(image, 3)

    # Hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh sau khi l·ªçc
    plt.figure(figsize=(10, 5))

    plt.subplot(1, 2, 1)
    plt.title("·∫¢nh g·ªëc")
    plt.imshow(image, cmap='gray')

    plt.subplot(1, 2, 2)
    plt.title("·∫¢nh sau khi l·ªçc trung v·ªã 3x3")
    plt.imshow(median_filtered, cmap='gray')

    plt.show()


def sobel_gray_3x3(filepath):
    # ƒê·ªçc ·∫£nh m·ª©c x√°m
    image = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)

    # T√≠nh ƒë·∫°o h√†m theo h∆∞·ªõng x v√† y v·ªõi Sobel
    sobel_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)  # ƒë·∫°o h√†m theo x
    sobel_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)  # ƒë·∫°o h√†m theo y

    # T√≠nh gradient t·ªïng h·ª£p
    gradient_magnitude = cv2.magnitude(sobel_x, sobel_y)

    # Hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh sau khi l·ªçc Sobel
    plt.figure(figsize=(12, 4))

    plt.subplot(1, 3, 1)
    plt.title("Original Image")
    plt.imshow(image, cmap="gray")

    plt.subplot(1, 3, 2)
    plt.title("Sobel X")
    plt.imshow(np.abs(sobel_x), cmap="gray")

    plt.subplot(1, 3, 3)
    plt.title("Sobel Y")
    plt.imshow(np.abs(sobel_y), cmap="gray")

    plt.show()


def sharpening_color_9x9(filepath):
    # Load the color image
    image = cv2.imread(filepath)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # Define a 9x9 sharpening kernel
    sharpen_kernel = np.array([
        [-1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, 81, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    ])

    # Apply the sharpening kernel to the image
    sharpened_image = cv2.filter2D(image, -1, sharpen_kernel)

    # Display the original and sharpened images side by side
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(image)
    plt.title("Original Image")

    plt.subplot(1, 2, 2)
    plt.imshow(sharpened_image)
    plt.title("Sharpened Image")

    plt.show()


def sharpening_color_3x3(filepath):
    # ƒê·ªçc ·∫£nh m√†u
    image = cv2.imread(filepath)
    # ƒê·ªïi m√†u ·∫£nh t·ª´ BGR sang RGB ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng m√†u
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # ƒê·ªãnh nghƒ©a kernel sharpening 3x3
    kernel = np.array([[-1, -1, -1],
                       [-1, 9, -1],
                       [-1, -1, -1]])

    # √Åp d·ª•ng b·ªô l·ªçc
    sharpened_image = cv2.filter2D(image, -1, kernel)

    # Hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh ƒë√£ l√†m s·∫Øc n√©t
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(image)
    plt.title("Original Image")
    plt.axis("off")

    plt.subplot(1, 2, 2)
    plt.imshow(sharpened_image)
    plt.title("Sharpened Image")
    plt.axis("off")

    plt.show()

# Œ≥ l√† gi√° tr·ªã gamma ƒëi·ªÅu ch·ªânh. Gi√° tr·ªã Œ≥<1 s·∫Ω l√†m s√°ng ·∫£nh, c√≤n Œ≥>1 s·∫Ω l√†m t·ªëi ·∫£nh.
# Power-Law Transformations
def power_law_transform(filepath, gamma, c=5):
    # ƒê·ªçc ·∫£nh grayscale
    image = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)
    # Chu·∫©n h√≥a ·∫£nh ƒë·ªÉ gi√° tr·ªã pixel n·∫±m trong kho·∫£ng [0, 1]
    normalized_image = image / 255.0

    # Th·ª±c hi·ªán bi·∫øn ƒë·ªïi power-law v·ªõi c√¥ng th·ª©c S = c * r^gamma
    # Gi√° tr·ªã c·ªßa transformed_image th∆∞·ªùng n·∫±m trong kho·∫£ng [0,c], v·ªõi ùëê = 5 
    transformed_image = c * np.power(normalized_image, gamma)

    # Chuy·ªÉn l·∫°i gi√° tr·ªã pixel v·ªÅ kho·∫£ng [0, 255]
    # B·∫•t k·ª≥ gi√° tr·ªã n√†o nh·ªè h∆°n 0 s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t th√†nh 0.
    # B·∫•t k·ª≥ gi√° tr·ªã n√†o l·ªõn h∆°n 255 s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t th√†nh 255.
    result_image = np.uint8(np.clip(transformed_image * 255, 0, 255))

    # Hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh sau khi bi·∫øn ƒë·ªïi
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.title("Original Image")
    plt.imshow(image, cmap="gray")
    plt.axis("off")

    plt.subplot(1, 2, 2)
    plt.title(f"Transformed Image (c={c}, gamma={gamma})")
    plt.imshow(result_image, cmap="gray")
    plt.axis("off")

    plt.show()


# chuy·ªÉn ·∫£nh ƒëa m·ª©c x√°m d∆∞∆°ng b·∫£n sang √¢m b·∫£n
def duong_ban_sang_am_ban(filepath):
    # ƒê·ªçc ·∫£nh d∆∞∆°ng b·∫£n
    image = cv2.imread(filepath)
    # Chuy·ªÉn ƒë·ªïi sang √¢m b·∫£n
    negative_image = 255 - image
    cv2.imshow("image result of changing to negative iamge", negative_image)

    # Ch·ªù ƒë·∫øn khi nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ƒë√≥ng c·ª≠a s·ªï
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def sharpening_gray_9x9(filepath):
    # ƒê·ªçc ·∫£nh ·ªü d·∫°ng ƒëa m·ª©c x√°m
    image = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)

    # T·∫°o kernel l√†m s·∫Øc n√©t 9x9
    # Kernel n√†y l√†m s·∫Øc n√©t b·∫±ng c√°ch gi·ªØ l·∫°i gi√° tr·ªã trung t√¢m l·ªõn v√† c√°c gi√° tr·ªã xung quanh nh·ªè h∆°n
    sharpening_kernel = np.array([
        [-1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, 81, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    ])

    # √Åp d·ª•ng b·ªô l·ªçc l√†m s·∫Øc n√©t
    sharpened_image = cv2.filter2D(image, -1, sharpening_kernel)

    # Hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh sau khi l√†m s·∫Øc n√©t
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.title('·∫¢nh g·ªëc')
    plt.imshow(image, cmap='gray')

    plt.subplot(1, 2, 2)
    plt.title('·∫¢nh l√†m s·∫Øc n√©t')
    plt.imshow(sharpened_image, cmap='gray')

    plt.show()


def sharpening_gray_3x3(filepath):
    # ƒê·ªçc ·∫£nh ·ªü d·∫°ng ƒëa m·ª©c x√°m
    image = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)

    # T·∫°o kernel l√†m s·∫Øc n√©t 3x3
    sharpening_kernel = np.array([[0, -1, 0],
                                  [-1, 5, -1],
                                  [0, -1, 0]])

    # √Åp d·ª•ng b·ªô l·ªçc l√†m s·∫Øc n√©t
    sharpened_image = cv2.filter2D(image, -1, sharpening_kernel)

    # Hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh sau khi l√†m s·∫Øc n√©t
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.title('·∫¢nh g·ªëc')
    plt.imshow(image, cmap='gray')

    plt.subplot(1, 2, 2)
    plt.title('·∫¢nh l√†m s·∫Øc n√©t')
    plt.imshow(sharpened_image, cmap='gray')

    plt.show()


def mean_color_9x9(filepath):
    # ƒê·ªçc ·∫£nh
    image = cv2.imread(filepath)  # ƒê∆∞·ªùng d·∫´n t·ªõi ·∫£nh c·ªßa b·∫°n
    # Chuy·ªÉn ƒë·ªïi sang RGB ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng v·ªõi Matplotlib
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # √Åp d·ª•ng b·ªô l·ªçc mean v·ªõi kernel 9x9
    kernel_size = (9, 9)
    filtered_image = cv2.blur(image_rgb, kernel_size)

    # Hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh ƒë√£ l·ªçc
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(image_rgb)
    plt.title('·∫¢nh g·ªëc')

    plt.subplot(1, 2, 2)
    plt.imshow(filtered_image)
    plt.title('·∫¢nh sau khi l·ªçc mean (9x9)')

    plt.show()


def mean_color_3x3(filepath):
    # ƒê·ªçc ·∫£nh
    image = cv2.imread(filepath)  # ƒê∆∞·ªùng d·∫´n t·ªõi ·∫£nh c·ªßa b·∫°n
    # Chuy·ªÉn ƒë·ªïi sang RGB ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng v·ªõi Matplotlib
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # √Åp d·ª•ng b·ªô l·ªçc mean v·ªõi kernel 3x3
    kernel_size = (3, 3)
    filtered_image = cv2.blur(image_rgb, kernel_size)

    # Hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh ƒë√£ l·ªçc
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(image_rgb)
    plt.title('·∫¢nh g·ªëc')

    plt.subplot(1, 2, 2)
    plt.imshow(filtered_image)
    plt.title('·∫¢nh sau khi l·ªçc mean (3x3)')

    plt.show()


def mean_gray_9x9(filepath):
    # ƒê·ªçc ·∫£nh ƒëa m·ª©c x√°m
    image = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)

    # √Åp d·ª•ng b·ªô l·ªçc trung b√¨nh v·ªõi kernel 9x9
    kernel_size = (9, 9)
    filtered_image = cv2.blur(image, kernel_size)

    # Hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh sau khi l·ªçc
    cv2.imshow("Original Image", image)
    cv2.imshow("Mean Filtered Image", filtered_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def loc_Gaussian_color_9x9(filepath):
    # ƒê·ªçc ·∫£nh m√†u
    image = cv2.imread(filepath)

    # √Åp d·ª•ng b·ªô l·ªçc Gaussian v·ªõi kernel 9x9
    blurred_image = cv2.GaussianBlur(image, (9, 9), 0)

    # Hi·ªÉn th·ªã ·∫£nh k·∫øt qu·∫£
    cv2.imshow('Original Image', image)
    cv2.imshow('Gaussian Blurred Image', blurred_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def loc_Gaussian_gray_9x9(filepath):
    # ƒê·ªçc ·∫£nh v√† chuy·ªÉn th√†nh ·∫£nh ƒëa m·ª©c x√°m
    image = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)

    # √Åp d·ª•ng b·ªô l·ªçc Gaussian v·ªõi kernel 9x9
    blurred_image = cv2.GaussianBlur(image, (9, 9), 0)

    # Hi·ªÉn th·ªã ·∫£nh k·∫øt qu·∫£
    cv2.imshow('Original Image', image)
    cv2.imshow('Gaussian Blurred Image', blurred_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def loc_Gaussian_color_3x3(filepath):
    # ƒê·ªçc ·∫£nh m√†u
    image = cv2.imread(filepath)

    # √Åp d·ª•ng b·ªô l·ªçc Gaussian v·ªõi kernel 3x3
    blurred_image = cv2.GaussianBlur(image, (3, 3), 0)

    # Hi·ªÉn th·ªã ·∫£nh k·∫øt qu·∫£
    cv2.imshow('Original Image', image)
    cv2.imshow('Gaussian Blurred Image', blurred_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def loc_Gaussian_gray_3x3(filepath):
    image = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)

    # B·ªô l·ªçc Gaussian 3x3 v·ªõi sigma = 1
    gaussian_filter_3x3 = np.array([[1, 2, 1],
                                    [2, 4, 2],
                                    [1, 2, 1]]) / 16
    # Th·ª±c hi·ªán t√≠ch ch·∫≠p
    # mode='constant', cval=0 x·ª≠ l√Ω edge
    result = convolve(image, gaussian_filter_3x3, mode='constant', cval=0)

    # cv2.imshow("·∫¢nh g·ªëc", image)
    cv2.imshow("image result of Gaussian filter", result)

    # Ch·ªù ƒë·∫øn khi nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ƒë√≥ng c·ª≠a s·ªï
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    print("loc_Gaussian_gray: ", result)


def loc_mean_gray_3x3(filepath):
    # ƒê·ªçc ·∫£nh
    image = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)

    # B·ªô l·ªçc trung b√¨nh 3x3
    mean_filter_3x3 = np.array([[1, 1, 1],
                                [1, 1, 1],
                                # Chia cho 9 ƒë·ªÉ ƒë·∫£m b·∫£o t·ªïng b·∫±ng 1
                                [1, 1, 1]]) / 9

    # Th·ª±c hi·ªán t√≠ch ch·∫≠p
    result = convolve(image, mean_filter_3x3, mode='constant', cval=0)

    # Hi·ªÉn th·ªã ·∫£nh ƒë√£ l·ªçc
    cv2.imshow("image result of mean filter", result)

    # Ch·ªù ƒë·∫øn khi nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ƒë√≥ng c·ª≠a s·ªï
    cv2.waitKey(0)
    cv2.destroyAllWindows()


if __name__ == '__main__':
    main()
